services:
  db_contato:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    networks:
      - monitoring
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    restart: always
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: ${DATA_SOURCE_NAME}
    command:
      - "--log.level=error"
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    depends_on:
      - db_contato
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      LOG_LEVEL_WARNING: ${LOG_LEVEL_WARNING}
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    ports:
      - "15672:15672"
      - "5672:5672"
      - "15692:15962"
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--log.level=warn"
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      LOG_LEVEL: ${LOG_LEVEL}
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    networks:
      - monitoring
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  add-contato-consumer:
    build:
      context: .
      dockerfile: src/Consumers/AddContatoConsumer/Dockerfile
    environment:
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_ADD_CONTATO: ${RABBITMQ_ADD_CONTATO}
      ENABLE_METRICS: ${ENABLE_METRICS}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    networks:
      - monitoring
    depends_on:
      rabbitmq:
        condition: service_healthy
      db_contato:
        condition: service_healthy

  update-contato-consumer:
    build:
      context: .
      dockerfile: src/Consumers/UpdateContatoConsumer/Dockerfile
    environment:
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_UPDATE_CONTATO: ${RABBITMQ_UPDATE_CONTATO}
      ENABLE_METRICS: ${ENABLE_METRICS}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    networks:
      - monitoring
    depends_on:
      rabbitmq:
        condition: service_healthy
      db_contato:
        condition: service_healthy

  delete-contato:
    build:
      context: .
      dockerfile: src/DeleteContato/Dockerfile
    environment:
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      ENABLE_METRICS: ${ENABLE_METRICS}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    ports:
      - "${DELETE_CONTATO_PORT}:8080"
    networks:
      - monitoring
    depends_on:
      db_contato:
        condition: service_healthy

  get-contato:
    build:
      context: .
      dockerfile: src/GetContato/Dockerfile
    environment:
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      ENABLE_METRICS: ${ENABLE_METRICS}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    ports:
      - "${GET_CONTATO_PORT}:8080"
    networks:
      - monitoring
    depends_on:
      db_contato:
        condition: service_healthy

  add-contato-producer:
    build:
      context: .
      dockerfile: src/Producers/AddContatoProducer/Dockerfile
    environment:
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_ADD_CONTATO: ${RABBITMQ_ADD_CONTATO}
      ENABLE_METRICS: ${ENABLE_METRICS}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    ports:
      - "${ADD_CONTATO_PRODUCER_PORT}:8080"
    networks:
      - monitoring
    depends_on:
      rabbitmq:
        condition: service_healthy
      db_contato:
        condition: service_healthy

  update-contato-producer:
    build:
      context: .
      dockerfile: src/Producers/UpdateContatoProducer/Dockerfile
    environment:
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_UPDATE_CONTATO: ${RABBITMQ_UPDATE_CONTATO}
      ENABLE_METRICS: ${ENABLE_METRICS}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    ports:
      - "${UPDATE_CONTATO_PRODUCER_PORT}:8080"
    networks:
      - monitoring
    depends_on:
      rabbitmq:
        condition: service_healthy
      db_contato:
        condition: service_healthy

  tests-unit:
    build:
      context: .
      dockerfile: src/Tests/Dockerfile
    depends_on:
      db_contato:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - monitoring
    environment:
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_ADD_CONTATO: ${RABBITMQ_ADD_CONTATO}
      RABBITMQ_UPDATE_CONTATO: ${RABBITMQ_UPDATE_CONTATO}
      ENABLE_METRICS: ${ENABLE_METRICS}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    command: ["--filter", "Category=Unit"]

  tests-integration:
    build:
      context: .
      dockerfile: src/Tests/Dockerfile
    depends_on:
      db_contato:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - monitoring
    environment:
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_ADD_CONTATO: ${RABBITMQ_ADD_CONTATO}
      RABBITMQ_UPDATE_CONTATO: ${RABBITMQ_UPDATE_CONTATO}
      ENABLE_METRICS: ${ENABLE_METRICS}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    command: ["--filter", "Category=Integration"]

  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    restart: always
    ports:
      - "9100:9100"
    command:
      - "--log.level=error"
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  grafana_data: 
  
networks:
  monitoring:
    driver: bridge